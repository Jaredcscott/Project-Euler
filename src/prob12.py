from triangleNums1 import triangleNums
'''
for i in range(1,50000):
    curNum = 0
    for j in range(1,i+1):
        curNum += j
    triangleNums.append(curNum)



print(triangleNums)

'''
numberToCheck = [1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 14, 15, 16, 17, 20, 21, 22, 23, 24, 28, 30, 32, 33, 34, 35, 40, 42, 44, 46, 48, 51, 55, 56, 60, 64, 66, 68, 69, 70, 77, 80, 84, 85, 88, 92, 96, 102, 105, 110, 112, 115, 119, 120, 128, 132, 136, 138, 140, 154, 160, 161, 165, 168, 170, 176, 184, 187, 192, 204, 210, 220, 224, 230, 231, 238, 240, 253, 255, 256, 264, 272, 276, 280, 308, 320, 322, 330, 336, 340, 345, 352, 357, 368, 374, 384, 385, 391, 408, 420, 440, 448, 460, 462, 476, 480, 483, 506, 510, 512, 528, 544, 552, 560, 561, 595, 616, 640, 644, 660, 672, 680, 690, 704, 714, 736, 748, 759, 768, 770, 782, 805, 816, 840, 880, 896, 920, 924, 935, 952, 960, 966, 1012, 1020, 1056, 1088, 1104, 1120, 1122, 1155, 1173, 1190, 1232, 1265, 1280, 1288, 1309, 1320, 1344, 1360, 1380, 1408, 1428, 1472, 1496, 1518, 1536, 1540, 1564, 1610, 1632, 1680, 1760, 1771, 1785, 1792, 1840, 1848, 1870, 1904, 1920, 1932, 1955, 2024, 2040, 2112, 2176, 2208, 2240, 2244, 2310, 2346, 2380, 2415, 2464, 2530, 2560, 2576, 2618, 2640, 2688, 2720, 2737, 2760, 2805, 2816, 2856, 2944, 2992, 3036, 3080, 3128, 3220, 3264, 3360, 3520, 3542, 3570, 3584, 3680, 3696, 3740, 3795, 3808, 3840, 3864, 3910, 3927, 4048, 4080, 4224, 4301, 4352, 4416, 4480, 4488, 4620, 4692, 4760, 4830, 4928, 5060, 5152, 5236, 5280, 5313, 5376, 5440, 5474, 5520, 5610, 5632, 5712, 5865, 5888, 5984, 6072, 6160, 6256, 6440, 6528, 6545, 6720, 7040, 7084, 7140, 7360, 7392, 7480, 7590, 7616, 7680, 7728, 7820, 7854, 8096, 8160, 8211, 8448, 8602, 8704, 8832, 8855, 8960, 8976, 9240, 9384, 9520, 9660, 9856, 10120, 10304, 10472, 10560, 10626, 10752, 10880, 10948, 11040, 11220, 11424, 11730, 11776, 11968, 12144, 12320, 12512, 12880, 12903, 13056, 13090, 13440, 13685, 14080, 14168, 14280, 14720, 14784, 14960, 15180, 15232, 15456, 15640, 15708, 16192, 16320, 16422, 16896, 17204, 17664, 17710, 17920, 17952, 18480, 18768, 19040, 19320, 19635, 19712, 20240, 20608, 20944, 21120, 21252, 21505, 21760, 21896, 22080, 22440, 22848, 23460, 23936, 24288, 24640, 25024, 25760, 25806, 26112, 26180, 26565, 26880, 27370, 28160, 28336, 28560, 29440, 29568, 29920, 30107, 30360, 30464, 30912, 31280, 31416, 32384, 32640, 32844, 34408, 35328, 35420, 35904, 36960, 37536, 38080, 38640, 39270, 39424, 40480, 41055, 41216, 41888, 42240, 42504, 43010, 43520, 43792, 44160, 44880, 45696, 46920, 47872, 48576, 49280, 50048, 51520, 51612, 52360, 53130, 53760, 54740, 56672, 57120, 58880, 59136, 59840, 60214, 60720, 60928, 61824, 62560, 62832, 64515, 64768, 65280, 65688, 68816, 70840, 71808, 73920, 75072, 76160, 77280, 78540, 80960, 82110, 82432, 83776, 84480, 85008, 86020, 87584, 88320, 89760, 90321, 91392, 93840, 95744, 97152, 98560, 100096, 103040, 103224, 104720, 106260, 109480, 113344, 114240, 118272, 119680, 120428, 121440, 123648, 125120, 125664, 129030, 129536, 130560, 131376, 137632, 141680, 143616, 147840, 150144, 150535, 152320, 154560, 157080, 161920, 164220, 167552, 170016, 172040, 175168, 176640, 179520, 180642, 182784, 187680, 194304, 197120, 200192, 206080, 206448, 209440, 212520, 218960, 226688, 228480, 239360, 240856, 242880, 247296, 250240, 251328, 258060, 262752, 275264, 283360, 287232, 295680, 300288, 301070, 304640, 309120, 314160, 323840, 328440, 335104, 340032, 344080, 350336, 359040, 361284, 375360, 388608, 412160, 412896, 418880, 425040, 437920, 451605, 453376, 456960, 478720, 481712, 485760, 500480, 502656, 516120, 525504, 550528, 566720, 591360, 600576, 602140, 618240, 628320, 647680, 656880, 670208, 680064, 688160, 700672, 718080, 722568, 750720, 825792, 837760, 850080, 875840, 903210, 906752, 913920, 963424, 971520, 1000960, 1005312, 1032240, 1051008, 1101056, 1133440, 1204280, 1236480, 1256640, 1313760, 1360128, 1376320, 1401344, 1436160, 1445136, 1501440, 1651584, 1675520, 1700160, 1751680, 1806420, 1926848, 1943040, 2010624, 2064480, 2102016, 2202112, 2266880, 2408560, 2513280, 2627520, 2720256, 2752640, 2890272, 3002880, 3303168, 3351040, 3400320, 3503360, 3612840, 3853696, 4128960, 4204032, 4533760, 4817120, 5026560, 5255040, 5505280, 5780544, 6606336, 6800640, 7006720, 7225680, 7707392, 8257920, 9634240, 10053120, 10510080, 11010560, 11561088, 13601280, 14451360, 15414784, 16515840, 19268480, 21020160, 23122176, 28902720, 33031680, 38536960, 46244352, 57805440, 77073920, 115610880, 231221760]
def isTriangular(num): 
  
    # Base case 
    if (num < 0): 
        return False
  
    # A Triangular number must be  
    # sum of first n natural numbers 
    sum, n = 0, 1
  
    while(sum <= num):  
      
        sum = sum + n 
        if (sum == num): 
            return True
        n += 1
  
    return False
#print(triangleNums)
highestNum = 0
highestFactors = 0
for triNum in triangleNums:
    factors = []
    #while len(factors) <= 500:
    for i in range(1,int(triNum**0.5) + 2):
        if triNum % i == 0 and i not in factors:
            factors.append(i)
            
    factors.append(triNum)
    if len(factors) > highestFactors:
        highestFactors = len(factors)
        print(triNum)
        print(factors)
        print("factors: " + str(highestFactors))
        
    if len(factors) > 500:
        highestNum = triNum
        n = highestNum
        if (isTriangular(n)): 
            print("The number is a triangular number") 
        else: 
            print("The number is NOT a triangular number")
        break
    if triNum > 236215980 and len(factors) > 300:
        print(triNum)
        print(len(factors))
        
    if triNum == 231221760:
        same = []
        for i in factors:
            for j in numberToCheck:
                if i == j:
                    same.append(i)
                    
        print(same)

# Driver code 
n = highestNum
if (isTriangular(n)): 
    print("The number is a triangular number") 
else: 
    print("The number is NOT a triangular number")
        
print(highestNum)



  



                
